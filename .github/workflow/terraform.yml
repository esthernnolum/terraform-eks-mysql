name: 'Terraform'

on:
  push:
    branches:
    - main
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: development

    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        token: ${{ secrets.TF_API_TOKEN }}
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      env: 
         S3_ACCESS_KEY_ID: ${{ secrets.ACCESS_ID }}
         S3_SECRET_ACCESS_KEY: ${{ secrets.SECRET_KEY }}
         AWS_ACCESS_TOKEN: ${{ secrets.TF_API_TOKEN }}
      run: terraform init -backend-config="access_key=$S3_ACCESS_KEY_ID"  -backend-config="secret_key=$S3_SECRET_ACCESS_KEY" 
      
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      continue-on-error: true
      
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      env: 
         S3_ACCESS_KEY_ID: ${{ secrets.ACCESS_ID }}
         S3_SECRET_ACCESS_KEY: ${{ secrets.SECRET_KEY }}
         AWS_ACCESS_TOKEN: ${{ secrets.TF_API_TOKEN }}
      run: terraform plan -input=false 

    - name: Terraform Apply
      env: 
         AWS_ACCESS_TOKEN: ${{ secrets.TF_API_TOKEN }}
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
      
    - name: Terraform Output
      run: terraform output 

      
      
